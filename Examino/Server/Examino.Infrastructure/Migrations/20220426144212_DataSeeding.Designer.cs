// <auto-generated />
using System;
using Examino.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examino.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220426144212_DataSeeding")]
    partial class DataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Examino.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("PESEL")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8931ce67-348b-48b6-96fc-6fc47a74311e"),
                            AccessFailedCount = 0,
                            Address = "Miejska 10",
                            BirthDay = new DateTime(1988, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            ConcurrencyStamp = "d73621af-f4d6-403e-9a65-dbe8905e4440",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Antek",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PESEL = 99101912345L,
                            PasswordHash = "AQAAAAEAACcQAAAAENmur9tGyuLBQyu8sxpNdcYfPknQmGq9D7qQDtX+wwhaM2R/QNt9uldTq5h8aakInw==",
                            PhoneNumber = "999111222",
                            PhoneNumberConfirmed = true,
                            PostalCode = "30-004",
                            SecurityStamp = "eb874b3e-21f9-4129-869a-6b934d18d76a",
                            Surname = "Kowalski",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Examino.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medicines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RaportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaportId")
                        .IsUnique();

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d092a09-ae05-4333-9872-a5c35727f4f5"),
                            Medicines = "xyzal 5mg film-coated tablets ",
                            RaportId = new Guid("c72b703e-21f0-45ea-9323-e1362b494cb1")
                        },
                        new
                        {
                            Id = new Guid("aca33117-640a-47f5-b3d8-2739a7698042"),
                            Medicines = "nasonex 18g ",
                            RaportId = new Guid("b03172a3-fc8f-4419-a63e-618359d4cd99")
                        },
                        new
                        {
                            Id = new Guid("33842c30-c6b2-4dab-87a6-9e71e4bb0250"),
                            Medicines = "potassium suplement",
                            RaportId = new Guid("a34d644f-55fc-4a39-addd-a8cc07f89c34")
                        });
                });

            modelBuilder.Entity("Examino.Domain.Entities.Raport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Examination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RaportTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Raports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a34d644f-55fc-4a39-addd-a8cc07f89c34"),
                            Comment = " do cholesterol tests",
                            Diagnosis = " there are needed cholesterol tests ",
                            DoctorId = new Guid("ae47d26c-b934-4057-8d05-dfd78ea1a138"),
                            Examination = "checking pulse, checking sound of lungs",
                            PatientId = new Guid("4d9b6996-8e8a-4cec-9f2f-d7f64e2113ca"),
                            RaportTime = new DateTimeOffset(new DateTime(2022, 4, 26, 16, 42, 12, 158, DateTimeKind.Unspecified).AddTicks(1011), new TimeSpan(0, 2, 0, 0, 0)),
                            Recommendation = "increase potassium income",
                            Symptoms = " heart pain,pain in middle of chest,lazziness "
                        },
                        new
                        {
                            Id = new Guid("b03172a3-fc8f-4419-a63e-618359d4cd99"),
                            Comment = "there is need for rendgen photo",
                            Diagnosis = "curve septum",
                            DoctorId = new Guid("d9339e74-284d-46f4-ad46-b13269c4900e"),
                            Examination = "after checking nose i saw curve in bones",
                            PatientId = new Guid("c394c3c5-3727-4b3b-999f-de8180edf15f"),
                            RaportTime = new DateTimeOffset(new DateTime(2022, 4, 26, 16, 42, 12, 158, DateTimeKind.Unspecified).AddTicks(1067), new TimeSpan(0, 2, 0, 0, 0)),
                            Recommendation = "using nasonex twice a day  at 7 AM and at 9PM",
                            Symptoms = " runny nose "
                        },
                        new
                        {
                            Id = new Guid("c72b703e-21f0-45ea-9323-e1362b494cb1"),
                            Comment = "there are needed allergy tests",
                            Diagnosis = "allergy to dust mites",
                            DoctorId = new Guid("d9339e74-284d-46f4-ad46-b13269c4900e"),
                            Examination = "runny nose",
                            PatientId = new Guid("4d9b6996-8e8a-4cec-9f2f-d7f64e2113ca"),
                            RaportTime = new DateTimeOffset(new DateTime(2022, 4, 26, 16, 42, 12, 158, DateTimeKind.Unspecified).AddTicks(1074), new TimeSpan(0, 2, 0, 0, 0)),
                            Recommendation = "bed cleaning, xyzal once a day",
                            Symptoms = "runny nose after night's sleep  "
                        },
                        new
                        {
                            Id = new Guid("fd01f84e-8917-461a-8d6d-b5758a6065b2"),
                            Comment = "",
                            Diagnosis = "just cold",
                            DoctorId = new Guid("d9339e74-284d-46f4-ad46-b13269c4900e"),
                            Examination = "he has temperature ",
                            PatientId = new Guid("f43c4920-a607-4d32-a937-ba324e07ebd6"),
                            RaportTime = new DateTimeOffset(new DateTime(2022, 4, 26, 16, 42, 12, 158, DateTimeKind.Unspecified).AddTicks(1080), new TimeSpan(0, 2, 0, 0, 0)),
                            Recommendation = "stay at home and take aspiryn  ",
                            Symptoms = "runny nose,cough   "
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d6f59b9-3f81-4678-9a40-f1d018e711ca"),
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("15268796-ee21-482c-8f68-fdec407de8ae"),
                            ConcurrencyStamp = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("c8b28366-811a-4c6f-9838-f603c452d37e"),
                            ConcurrencyStamp = "1",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8931ce67-348b-48b6-96fc-6fc47a74311e"),
                            RoleId = new Guid("7d6f59b9-3f81-4678-9a40-f1d018e711ca")
                        },
                        new
                        {
                            UserId = new Guid("ae47d26c-b934-4057-8d05-dfd78ea1a138"),
                            RoleId = new Guid("15268796-ee21-482c-8f68-fdec407de8ae")
                        },
                        new
                        {
                            UserId = new Guid("d9339e74-284d-46f4-ad46-b13269c4900e"),
                            RoleId = new Guid("15268796-ee21-482c-8f68-fdec407de8ae")
                        },
                        new
                        {
                            UserId = new Guid("4d9b6996-8e8a-4cec-9f2f-d7f64e2113ca"),
                            RoleId = new Guid("c8b28366-811a-4c6f-9838-f603c452d37e")
                        },
                        new
                        {
                            UserId = new Guid("c394c3c5-3727-4b3b-999f-de8180edf15f"),
                            RoleId = new Guid("c8b28366-811a-4c6f-9838-f603c452d37e")
                        },
                        new
                        {
                            UserId = new Guid("f43c4920-a607-4d32-a937-ba324e07ebd6"),
                            RoleId = new Guid("c8b28366-811a-4c6f-9838-f603c452d37e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Examino.Domain.Entities.Doctor", b =>
                {
                    b.HasBaseType("Examino.Domain.Entities.ApplicationUser");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae47d26c-b934-4057-8d05-dfd78ea1a138"),
                            AccessFailedCount = 0,
                            Address = "Baciarego 10",
                            BirthDay = new DateTime(1966, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            ConcurrencyStamp = "b1e655b0-d7a4-483e-98d4-32c4961360f9",
                            Email = "WitoldMajewski@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Witold",
                            NormalizedEmail = "WITOLDMAJEWSKI@GMAIL.COM",
                            NormalizedUserName = "WITOLDMAJEWSKI@GMAIL.COM",
                            PESEL = 66030280889L,
                            PasswordHash = "AQAAAAEAACcQAAAAEC2GO3klewDFS2SoPk/t6dT4olrUoaHvsp2+SepovOP30SdaZd19VBk3gJQ8Gcp9Vw==",
                            PhoneNumber = "999321933",
                            PhoneNumberConfirmed = true,
                            PostalCode = "30-001",
                            SecurityStamp = "334cec6e-d359-49eb-9840-e8fe10a1722f",
                            Surname = "Majewski",
                            TwoFactorEnabled = false,
                            UserName = "WitoldMajewski@gmail.com",
                            Qualification = "Cardiologist,Internist",
                            Specialization = "cardiology,internal diseases"
                        },
                        new
                        {
                            Id = new Guid("d9339e74-284d-46f4-ad46-b13269c4900e"),
                            AccessFailedCount = 0,
                            Address = "Bliska 20",
                            BirthDay = new DateTime(1960, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kraków",
                            ConcurrencyStamp = "3d7da63a-60f0-4ea6-8764-79617417faab",
                            Email = "WGwinciarz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Wojciech",
                            NormalizedEmail = "WGWINCIARZ@GMAIL.COM",
                            NormalizedUserName = "WGWINCIARZ@GMAIL.COM",
                            PESEL = 60070111229L,
                            PasswordHash = "AQAAAAEAACcQAAAAEIYhM3YORQKJm0k7N5cqKnSbhC96Pq9RmXrxc4CnLTqoBTZuYzAQztZySAQeQW/pIg==",
                            PhoneNumber = "129888777",
                            PhoneNumberConfirmed = true,
                            PostalCode = "30-003",
                            SecurityStamp = "d6656279-db07-475a-992c-c28e809ea181",
                            Surname = "Gwinciarz",
                            TwoFactorEnabled = false,
                            UserName = "WGwinciarz@gmail.com",
                            Qualification = "Oncologist,Laryngologist",
                            Specialization = "oncological radiotherapy,otolaryngology "
                        });
                });

            modelBuilder.Entity("Examino.Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Examino.Domain.Entities.ApplicationUser");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d9b6996-8e8a-4cec-9f2f-d7f64e2113ca"),
                            AccessFailedCount = 0,
                            Address = "Kwiatowa 20",
                            BirthDay = new DateTime(1978, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Jeleśnia",
                            ConcurrencyStamp = "1b754a0b-8f4f-4aaa-9c55-2894eead6de6",
                            Email = "BartekSkrzypek@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bartek",
                            NormalizedEmail = "BARTEKSKRZYPEK@GMAIL.COM",
                            NormalizedUserName = "BARTEKSKRZYPEK@GMAIL.COM",
                            PESEL = 78032180802L,
                            PasswordHash = "AQAAAAEAACcQAAAAEF9wZ88YNAt9H+3WLmOt+zKGWNOcWIJaZ55GLpwJBUNQkCVXR9QaYbZS3Qpw9LWXSQ==",
                            PhoneNumber = "999111333",
                            PhoneNumberConfirmed = true,
                            PostalCode = "34-331",
                            SecurityStamp = "b4f9496b-eca1-4b64-9ab6-46cfba528706",
                            Surname = "Skrzypek",
                            TwoFactorEnabled = false,
                            UserName = "BartekSkrzypek@gmail.com",
                            BloodType = "B-",
                            Height = 175,
                            Weight = 80
                        },
                        new
                        {
                            Id = new Guid("c394c3c5-3727-4b3b-999f-de8180edf15f"),
                            AccessFailedCount = 0,
                            Address = "Morksa 20",
                            BirthDay = new DateTime(1990, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Gdańsk",
                            ConcurrencyStamp = "5b911963-272f-4e78-b743-189eb5a85003",
                            Email = "MichalGwizd@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Michał",
                            NormalizedEmail = "MICHALGWIZD@GMAIL.COM",
                            NormalizedUserName = "MICHALGWIZD@GMAIL.COM",
                            PESEL = 90042182882L,
                            PasswordHash = "AQAAAAEAACcQAAAAEDiothikNCKx8TYJg7G/RZcmv+gkd60YgwgUyl9bjy0px28NX1nCw0nldF/+95LuEQ==",
                            PhoneNumber = "999888777",
                            PhoneNumberConfirmed = true,
                            PostalCode = "80-001",
                            SecurityStamp = "59839d0e-1ba4-45ac-9477-b5f715566585",
                            Surname = "Gwizd",
                            TwoFactorEnabled = false,
                            UserName = "MichalGwizd@gmail.com",
                            BloodType = "B+",
                            Height = 172,
                            Weight = 70
                        },
                        new
                        {
                            Id = new Guid("f43c4920-a607-4d32-a937-ba324e07ebd6"),
                            AccessFailedCount = 0,
                            Address = "Wiejska 50",
                            BirthDay = new DateTime(1999, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Zakopane",
                            ConcurrencyStamp = "ffcbc1e7-5df3-45f4-86b7-a20a010c9bc3",
                            Email = "Jakub1999@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jakub",
                            NormalizedEmail = "JAKUB1999@GMAIL.COM",
                            NormalizedUserName = "JAKUB1999@GMAIL.COM",
                            PESEL = 99042382888L,
                            PasswordHash = "AQAAAAEAACcQAAAAECv20NXPrrfxjAEHUnwTNO9uDE4KgfugG9CxjET0omEU4pGNgv/9ahR86vfNvw4Egg==",
                            PhoneNumber = "992488111",
                            PhoneNumberConfirmed = true,
                            PostalCode = "34-500",
                            SecurityStamp = "380391c6-6adf-4dc2-b4f1-c79f9689b044",
                            Surname = "Kwiatowski",
                            TwoFactorEnabled = false,
                            UserName = "Jakub1999@gmail.com",
                            BloodType = "A+",
                            Height = 192,
                            Weight = 90
                        });
                });

            modelBuilder.Entity("Examino.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Examino.Domain.Entities.Raport", "Raport")
                        .WithOne("Prescription")
                        .HasForeignKey("Examino.Domain.Entities.Prescription", "RaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Raport");
                });

            modelBuilder.Entity("Examino.Domain.Entities.Raport", b =>
                {
                    b.HasOne("Examino.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Raports")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Examino.Domain.Entities.Patient", "Patient")
                        .WithMany("Raports")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Examino.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Examino.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examino.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Examino.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Examino.Domain.Entities.Raport", b =>
                {
                    b.Navigation("Prescription")
                        .IsRequired();
                });

            modelBuilder.Entity("Examino.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Raports");
                });

            modelBuilder.Entity("Examino.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Raports");
                });
#pragma warning restore 612, 618
        }
    }
}
